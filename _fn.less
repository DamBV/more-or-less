// basic functions for global usage


// .for

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + ((@n - @i) / abs(@n - @i))), @n);
}

// .for-each

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i)                  {.-each(extract(@array, @i));}

// .find

.find(@array, @value, @fallback: -1) {
    .for(@list); .-each(...) {}
    .-each(~'@{value}') {@-: @i}
    .-() {@-: @fallback} .-;
}


// .map

.map (@prop;@array...) {
    .for(@array);.-each(@i) {
        @class: extract(@i, 1);
        &.@{class} {@{prop}: extract(@i, 2);}
    }
}



