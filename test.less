// hacky ways to create loops in less
// this works in less 1.6.x
// earlier verions do not support some of the functionality

#functions {
  .loop () {
    .images (
      @property: 'background-image' ,
      @selector: '',
      @class-prefix: '',
      @type: 'a,b,c',
      @imgType: '.png',
      @path: '../img/',
      @prefix: 'url(',
      @suffix: ')',
      @convert: toString()) {
      //find length to make the stop point
      //@stopIndex: unit(`(function(){ return @{type}.split(",").length})()`);
      @stopIndex: 3;
      //need to get the first item in @type
      @firstClass: ~`(function(){
        var clsArray = @{type}.replace(/\s+/g, '').split(",");
        return clsArray[0];
      })()`;

      //set up our LESS loop (recursive)
      .loopTypes (@index, @captureClass) when (@index < @stopIndex) {
        @nextClass: ~`(function(){
          var clsArray = @{type}.replace(/\s+/g, '').split(",");
          //don't let it try to access past array length
          if(@{index} < (@{stopIndex} - 1)) {
            return clsArray[@{index} + 1];
          }
          else { return '' }
        })()`;
        @cleanSelector: ~`(function(){
          var clean = @{selector}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanPrefix: ~`(function(){
          var clean = @{prefix}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanSuffix: ~`(function(){
          var clean = @{suffix}.replace(/\\'/g, '');
          return clean
        })()`;
        @converted: ~`(function(){
          var str = "@{captureClass}";
          var clean = str.@{convert};
          return clean
        })()`;
        @cleanProperty: ~`(function(){
          var clean = @{property}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanClassPrefix: ~`(function(){
          var clean = @{class-prefix}.replace(/\\'/g, '');
          return clean
        })()`;
        @out:  @cleanPrefix'@{path}@{converted}@{imgType}'@cleanSuffix;

        //print the CSS
        &.@{cleanClassPrefix}@{captureClass}@{cleanSelector} {
          @{cleanProperty}: @out;
          //@cleanProperty: @out;
        }
        // next iteration
        .loopTypes(@index + 1, @nextClass);
      }

      // define guard expressoin to end the loop when past length
      .loopTypes (@stopIndex, @captureClass) {}

      // "call" the loopingClass the first time getting first item
      .loopTypes (0, @firstClass);
    }

    // loop through numbers
    .numbers (
      @index: 5,
      @property: 'top',
      @selector: '',
      @prefix: '',
      @suffix: 'px',
      @separator: '_',
      @multiplier: 1
      ) when (@index > 0) {

        @cleanPrefix: ~`(function(){
          var clean = @{prefix}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanSuffix: ~`(function(){
          var clean = @{suffix}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanSelector: ~`(function(){
          var clean = @{selector}.replace(/\\'/g, '');
          return clean
        })()`;
        @cleanProperty: ~`(function(){
          var clean = @{property}.replace(/\\'/g, '');
          return clean
          })()`;
        @cleanSeparator: ~`(function(){
          var clean = @{separator}.replace(/\\'/g, '');
          return clean
          })()`;
        @cleanIndex: ~`(function(){
          var clean = @{index} * @{multiplier};
          return clean
          })()`;
        @out:  '@{cleanPrefix}@{cleanIndex}@{cleanSuffix}';
        @cleanOut: ~`(function(){
          var clean = @{out}.replace(/\\'/g, '');
          return clean
          })()`;
        //print the CSS
        &@{cleanSeparator}@{index}@{cleanSelector} {
          @{cleanProperty}: @cleanOut;
          //@cleanProperty: @cleanOut;
          //top: @cleanOut;
        }

        // next iteration
        #functions > .loop > .numbers(
         @index: (@index - 1),
         @prefix: @prefix,
         @suffix: @suffix,
         @selector: @selector,
         @property: @property,
         @separator: @separator,
         @multiplier: @multiplier);
     }
  }
}






// TESTS

//testing numbers
.class {
  #functions > .loop > .numbers(@separator: '-', @suffix: '%', @multiplier: 100);
}

.class {
  #functions > .loop > .numbers(@separator: '-', @suffix: '%', @multiplier: -20, @selector: ' > div');
}

.class {
  #functions > .loop > .numbers(@separator: '-', @prefix: 'calc(100% - ', @suffix: 'px)', @multiplier: 100);
}

// testing images from arrays
@ARRAY: 'UPPERCASE, lowercase, camelCase';

.class {
  #functions > .loop > .images(@type: @ARRAY, @path: '../../../images/');
}

.class {
  #functions > .loop > .images(@selector: ':before', @type: @ARRAY, @imgType: '.jpg');
}

.class {
  #functions > .loop > .images(@property: 'background', @selector: ' .child', @type: @ARRAY, @prefix: 'transparent url(', @suffix: ') center center no-repeat');
}

.class {
  #functions > .loop > .images(@selector: ' .child > span', @type: @ARRAY, @convert: toLowerCase());
}

.class {
  #functions > .loop > .images(@type: @ARRAY, @path: '../../../images/', @class-prefix: 'testing-');
}

#functions > .loop > .images(@type: @ARRAY, @path: '../../../images/');

#functions > .loop > .images(@type: @ARRAY, @convert: toUpperCase());

